{"version":3,"sources":["utils/validators/validators.ts","FormControls/FormControls.js","hoc/AuthRedirect.js","Components/DialogsComponent/dialogsConnector.ts","Components/DialogsComponent/DialogItemComponent/DialogItem.tsx","Components/DialogsComponent/MessageComponent/Message.tsx","Components/DialogsComponent/Dialogs.tsx","Components/DialogsComponent/DialogsContainer.ts"],"names":["required","value","maxLength","max","length","undefined","classNames","require","Textarea","input","meta","touched","error","placeholder","props","hasError","classesForTextarea","className","Input","authRedirect","Component","RedirectComponent","this","isAuth","to","React","connect","state","auth","authRedirectAwaiter","AuthRedirectAwaiter","authThunkCreator","mapDispatchToProps","addMessage","addMessageActionCreator","dialogsConnector","dialogsPage","DialogItem","name","path","src","alt","Message","message","maxLength100","AddMessageReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","handleSubmit","onSubmit","Field","component","type","aria-label","validate","compose","dialogs","messages","map","dialog","key","id","formData","newMessageText"],"mappings":"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","file":"static/js/5.87355bcd.chunk.js","sourcesContent":["type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if(value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n","import React from 'react';\nimport './FormControls.css';\nlet classNames = require('classnames');\n\nexport const Textarea = ({input, meta: { touched, error }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'send-message': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <textarea className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n\nexport const Input = ({input, meta: { touched, error }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <input className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n","import { Redirect } from 'react-router-dom';\r\nimport React  from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { authThunkCreator } from '../reducers/authReducer';\r\nimport { Preloader } from '../Components/PreloaderComponent/Preloader';\r\n\r\n\r\nexport const authRedirect = (Component) => {\r\n  \r\n  let mapStateToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n  class RedirectComponent extends React.Component {\r\n    \r\n    render() {\r\n      if(!this.props.isAuth){\r\n        return <Redirect to=\"/login\"/>\r\n      } \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let connectAuthRedirect = connect(mapStateToRedirect)(RedirectComponent);\r\n\r\n  return connectAuthRedirect;\r\n};\r\n\r\nexport const authRedirectAwaiter = (Component) => {\r\n  \r\n  let mapStateToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n  class AuthRedirectAwaiter extends React.Component {\r\n    componentDidMount() {\r\n      this.props.authThunkCreator();\r\n    }\r\n    \r\n    render() {\r\n      if(this.props.isAuth === undefined){\r\n        return <Preloader />\r\n      } \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n\r\n  let connectAuthRedirect = connect(mapStateToRedirect, {authThunkCreator})(AuthRedirectAwaiter);\r\n\r\n  return connectAuthRedirect;\r\n};\r\n","import {connect, ConnectedProps} from \"react-redux\";\n\nimport {AppReducerType} from \"../../redux-store\";\nimport {addMessageActionCreator} from \"../../reducers/dialogsReducer\";\n\nconst mapStateToProps = (state: AppReducerType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    };\n};\n\nconst mapDispatchToProps = {\n    addMessage: addMessageActionCreator\n}\n\nexport const dialogsConnector = connect(mapStateToProps, mapDispatchToProps);\nexport type PropsFromRedux = ConnectedProps<typeof dialogsConnector>;\nexport type AddMessageHandler = PropsFromRedux[\"addMessage\"];\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nimport \"./DialogItem.css\";\r\n\r\ntype DialogItemProps = {\r\n    name: string;\r\n    path: number\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemProps> = ({name,path}) => {\r\n    return (\r\n        <div className=\"message_dialogs-item\">\r\n            <img className=\"message_dialogs-item-avatar\"\r\n                 src=\"https://pm1.narvii.com/6889/74979d4d2744ec6e27995b6e866f091d04c0b40cr1-515-414v2_uhq.jpg\" alt=''/>\r\n            <NavLink to={`/dialogs/${path}`}>{name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\ntype MessageProps = {\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<MessageProps> = ({message}) => {\r\n    return (\r\n        <div className=\"message_messages-item\">\r\n            <img src=\"https://cdn.pixabay.com/photo/2013/07/13/10/09/ghost-156656_960_720.png\" alt=''\r\n                 className='message_messages-item-avatar'/>\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\n\r\nimport \"./Dialogs.css\";\r\n\r\nimport {DialogItem} from \"./DialogItemComponent/DialogItem\";\r\nimport {Message} from \"./MessageComponent/Message\";\r\nimport {Textarea} from \"../../FormControls/FormControls\";\r\nimport {maxLength, required} from \"../../utils/validators/validators\";\r\nimport {AddMessageHandler} from \"./dialogsConnector\";\r\nimport {Dispatch} from \"redux\";\r\nimport {DecoratedFormProps} from \"redux-form/lib/reduxForm\";\r\nimport {DialogType, MessageType} from \"../../types\";\r\n\r\ntype SubmitHandler = (result: any, dispatch: Dispatch<any>,\r\n                      props: DecoratedFormProps<FormDataType, DialogsFormProps>) => void\r\n\r\nconst afterSubmit: SubmitHandler = (result: any, dispatch: Dispatch<any>) =>\r\n    dispatch(reset('addMessage'));\r\n\r\ntype DialogsProps = {\r\n    dialogsPage: {\r\n        dialogs: DialogType[],\r\n        messages: MessageType[]\r\n    };\r\n    isAuth: boolean;\r\n    addMessage: AddMessageHandler\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nexport const Dialogs: React.FC<DialogsProps> = (props) => {\r\n    const {\r\n        dialogsPage: {dialogs, messages},\r\n        isAuth, addMessage\r\n    } = props;\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={\"/login\"}/>;\r\n    }\r\n\r\n    let addNewMessage = (formData: FormDataType) => {\r\n        addMessage(formData.newMessageText);\r\n    };\r\n\r\n    return (\r\n        <div className=\"message-content\">\r\n            <div className=\"message_dialogs\">\r\n                {dialogs.map(dialog => {\r\n                    return (\r\n                        <DialogItem name={dialog.name} key={dialog.id} path={dialog.id}/>\r\n                    );\r\n                })}\r\n            </div>\r\n            <div className=\"message_messages\">\r\n                <div className=\"message_messages-items\">\r\n                    {messages.map(message => {\r\n                        return <Message key={message.id} message={message.message}/>;\r\n                    })}\r\n                </div>\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet maxLength100 = maxLength(100);\r\n\r\ntype DialogsFormProps = {};\r\ntype DialogsFormType = React.FC<DialogsFormProps & InjectedFormProps<FormDataType, DialogsFormProps>>;\r\nconst DialogsForm: DialogsFormType = ({handleSubmit}) => {\r\n    return (\r\n        <form\r\n            className=\"message_messages-textarea-send\"\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Field\r\n                component={Textarea}\r\n                name=\"newMessageText\"\r\n                type=\"text\"\r\n                placeholder=\"Write a message...\"\r\n                aria-label=\"Search\"\r\n                validate={[required, maxLength100]}\r\n            />\r\n            <div>\r\n                <button className=\"btn btn-primary\">Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType, DialogsFormProps>({\r\n    form: \"addMessage\",\r\n    onSubmitSuccess: afterSubmit\r\n})(DialogsForm);\r\n","import { compose } from \"redux\";\nimport {dialogsConnector} from \"./dialogsConnector\";\nimport { Dialogs } from \"./Dialogs\";\nimport { authRedirect, authRedirectAwaiter } from \"../../hoc/AuthRedirect\";\nimport {ComponentType} from \"react\";\n\nexport default compose<ComponentType>(\n  dialogsConnector,\n  authRedirectAwaiter,\n  authRedirect\n)(Dialogs);\n"],"sourceRoot":""}