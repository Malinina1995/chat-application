{"version":3,"sources":["utils/validators/validators.js","FormControls/FormControls.js","Components/LoginComponent/Login.js","Components/LoginComponent/LoginFormComponent/LoginForm.js"],"names":["required","value","maxLength","max","length","undefined","classNames","require","Textarea","input","meta","touched","error","placeholder","warning","props","hasError","classesForTextarea","className","Input","Login","isAuth","to","LoginReduxForm","onSubmit","formData","loginThunkCreator","login","password","rememberMe","reduxForm","form","handleSubmit","htmlFor","Field","component","type","validate","name","connect","state","auth"],"mappings":"gGAAA,oEAAO,IAAMA,EAAW,SAAAC,GACtB,IAAGA,EACH,MAAO,qBAGIC,EAAY,SAAAC,GAAG,OAAI,SAAAF,GAAK,OACnCA,GAASA,EAAMG,OAASD,EAAxB,kBAAyCA,EAAzC,4BAAoEE,K,kICJlEC,G,OAAaC,EAAQ,MAEZC,EAAW,SAAC,GAAuE,IAAtEC,EAAqE,EAArEA,MAAqE,IAA9DC,KAAQC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,MAAkBC,GAA2B,EAAtCC,QAAsC,EAA3BD,aAAgBE,EAAW,8CACvFC,EAAYL,GAAWC,EACvBK,EAAqBX,EAAW,CACpC,gBAAgB,EAChB,gBAAgB,EAChB,cAAiBU,EACjB,aAAgBA,IAGlB,OACE,4CAAUE,UAAWD,EAAoBJ,YAAaA,GAAiBJ,EAAWM,KAIzEI,EAAQ,SAAC,GAAuE,IAAtEV,EAAqE,EAArEA,MAAqE,IAA9DC,KAAQC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,MAAkBC,GAA2B,EAAtCC,QAAsC,EAA3BD,aAAgBE,EAAW,8CACpFC,EAAYL,GAAWC,EACvBK,EAAqBX,EAAW,CACpC,gBAAgB,EAChB,cAAiBU,EACjB,aAAgBA,IAGlB,OACE,yCAAOE,UAAWD,EAAoBJ,YAAaA,GAAiBJ,EAAWM,M,gPCnBxEK,EAAQ,SAAAL,GAKjB,OAAGA,EAAMM,OACA,kBAAC,IAAD,CAAUC,GAAG,aAIpB,yBAAKJ,UAAU,SACb,qCACA,kBAACK,EAAD,CAAgBC,SAXH,SAAAC,GACfV,EAAMW,kBAAkBD,EAASE,MAAOF,EAASG,SAAUH,EAASI,iBAmBlEN,EAAiBO,YAAU,CAC/BC,KAAM,SADeD,ECtBA,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcpB,EAAW,EAAXA,MACrC,OACE,0BAAMM,UAAU,aAAaM,SAAUQ,GACrC,yBAAKd,UAAU,cACb,2BAAOe,QAAQ,eAAf,SACA,kBAACC,EAAA,EAAD,CACEC,UAAWhB,IACXiB,KAAK,OACLC,SAAU,CAACrC,KACXsC,KAAK,QACLzB,YAAY,+EAGhB,yBAAKK,UAAU,cACb,2BAAOe,QAAQ,kBAAf,YACA,kBAACC,EAAA,EAAD,CACEC,UAAWhB,IACXiB,KAAK,WACLC,SAAU,CAACrC,KACXsC,KAAK,WACLzB,YAAY,qFAIhB,yBAAKK,UAAU,cACb,kBAACgB,EAAA,EAAD,CACEC,UAAU,QACVjB,UAAU,mBACVoB,KAAK,aACLF,KAAK,aAEP,2BAAOlB,UAAU,mBAAmBe,QAAQ,aAA5C,gBAIF,yBAAKf,UAAU,aAAaN,GAC5B,4BAAQwB,KAAK,SAASlB,UAAU,gCAAhC,aDVSqB,uBARO,SAAAC,GAAK,MAAK,CAC9BnB,OAAQmB,EAAMC,KAAKpB,UAOmB,CAACK,uBAA1Ba,CAA8CnB","file":"static/js/6.a77bb51a.chunk.js","sourcesContent":["export const required = value => {\r\n  if(value) return undefined;\r\n  return 'Field is reqiared';\r\n}\r\n\r\nexport const maxLength = max => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n","import React from 'react';\nimport './FormControls.css';\nvar classNames = require('classnames');\n\nexport const Textarea = ({input, meta: { touched, error, warning }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'send-message': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <textarea className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n\nexport const Input = ({input, meta: { touched, error, warning }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <input className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}","import React from \"react\";\nimport \"./Login.css\";\nimport { LoginForm } from \"./LoginFormComponent/LoginForm\";\nimport { reduxForm } from \"redux-form\";\nimport { connect } from 'react-redux';\nimport { loginThunkCreator } from '../../reducers/authReducer';\nimport { Redirect } from 'react-router-dom';\n\nexport let Login = props => {\n  const onSubmit = formData => {\n    props.loginThunkCreator(formData.login, formData.password, formData.rememberMe);\n  }\n\n  if(props.isAuth){\n    return <Redirect to='/profile'/>\n  }\n\n  return (\n    <div className=\"login\">\n      <h2>Login</h2>\n      <LoginReduxForm onSubmit={onSubmit}/>\n    </div>\n  );\n};\n\nlet mapStateToProps = state => ({\n  isAuth: state.auth.isAuth\n})\n\nconst LoginReduxForm = reduxForm({\n  form: \"login\"\n})(LoginForm);\n\nexport default connect(mapStateToProps, {loginThunkCreator})(Login);\n","import React from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport { Field } from \"redux-form\";\r\nimport { Input } from \"../../../FormControls/FormControls\";\r\nimport { required } from \"../../../utils/validators/validators\";\r\n\r\n\r\nexport let LoginForm = ({handleSubmit, error}) => {\r\n  return (\r\n    <form className=\"login-form\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputEmail4\">Login</label>\r\n        <Field\r\n          component={Input}\r\n          type=\"text\"\r\n          validate={[required]}\r\n          name=\"login\"\r\n          placeholder=\"Введите логин\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputPassword4\">Password</label>\r\n        <Field\r\n          component={Input}\r\n          type=\"password\"\r\n          validate={[required]}\r\n          name=\"password\"\r\n          placeholder=\"Введите пароль\"\r\n          \r\n        />\r\n      </div>\r\n      <div className=\"form-check\">\r\n        <Field\r\n          component='input'\r\n          className=\"form-check-input\"\r\n          name=\"rememberMe\"\r\n          type=\"checkbox\"\r\n        />\r\n        <label className=\"form-check-label\" htmlFor=\"gridCheck\">\r\n          Remember me\r\n        </label>\r\n      </div>\r\n      <div className='someError'>{error}</div>\r\n      <button type=\"submit\" className=\"btn btn-primary button-login\">\r\n        Login\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n"],"sourceRoot":""}