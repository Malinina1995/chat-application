{"version":3,"sources":["utils/validators/validators.ts","FormControls/FormControls.js","Components/LoginComponent/loginConnector.ts","Components/LoginComponent/Login.tsx","Components/LoginComponent/LoginFormComponent/LoginForm.tsx"],"names":["required","value","maxLength","max","length","undefined","classNames","require","Textarea","input","meta","touched","error","placeholder","props","hasError","classesForTextarea","className","Input","mapDispatchToProps","loginThunkCreator","loginConnector","connect","state","isAuth","auth","captchaUrl","captchaURL","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","htmlFor","Field","component","type","validate","name","src","alt","style","marginTop","to","formData","login","password","rememberMe","captcha"],"mappings":"gGAEA,oEAAO,IAAMA,EAA+B,SAACC,GAC3C,IAAGA,EACH,MAAO,qBAGIC,EAAY,SAACC,GAAD,OAAqC,SAAAF,GAAK,OACjEA,GAASA,EAAMG,OAASD,EAAxB,kBAAyCA,EAAzC,4BAAoEE,K,kICNlEC,G,OAAaC,EAAQ,MAEZC,EAAW,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,MAA4D,IAArDC,KAAQC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,MAASC,EAA2B,EAA3BA,YAAgBC,EAAW,8CAC9EC,EAAYJ,GAAWC,EACvBI,EAAqBV,EAAW,CACpC,gBAAgB,EAChB,gBAAgB,EAChB,cAAiBS,EACjB,aAAgBA,IAGlB,OACE,4CAAUE,UAAWD,EAAoBH,YAAaA,GAAiBJ,EAAWK,KAIzEI,EAAQ,SAAC,GAA8D,IAA7DT,EAA4D,EAA5DA,MAA4D,IAArDC,KAAQC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,MAASC,EAA2B,EAA3BA,YAAgBC,EAAW,8CAC3EC,EAAYJ,GAAWC,EACvBI,EAAqBV,EAAW,CACpC,gBAAgB,EAChB,cAAiBS,EACjB,aAAgBA,IAGlB,OACE,yCAAOE,UAAWD,EAAoBH,YAAaA,GAAiBJ,EAAWK,M,kMCjB7EK,EAAqB,CACvBC,kB,MAAAA,GAGSC,EAAiBC,aATN,SAACC,GAAD,MAA4B,CAChDC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKE,cAO4BR,GC2BjDS,EAAiBC,YAAwC,CAC7DC,KAAM,SADeD,EChCoB,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcnB,EAAuB,EAAvBA,MAAOc,EAAgB,EAAhBA,WAChE,OACE,0BAAMT,UAAU,aAAae,SAAUD,GACrC,yBAAKd,UAAU,cACb,2BAAOgB,QAAQ,eAAf,SACA,kBAACC,EAAA,EAAD,CACEC,UAAWjB,IACXkB,KAAK,OACLC,SAAU,CAACrC,KACXsC,KAAK,QACLzB,YAAY,+EAGhB,yBAAKI,UAAU,cACb,2BAAOgB,QAAQ,kBAAf,YACA,kBAACC,EAAA,EAAD,CACEC,UAAWjB,IACXkB,KAAK,WACLC,SAAU,CAACrC,KACXsC,KAAK,WACLzB,YAAY,qFAGhB,yBAAKI,UAAU,cACb,kBAACiB,EAAA,EAAD,CACEC,UAAU,QACVlB,UAAU,mBACVqB,KAAK,aACLF,KAAK,aAEP,2BAAOnB,UAAU,mBAAmBgB,QAAQ,aAA5C,gBAIF,yBAAKhB,UAAU,aAAaL,GAE1Bc,GAAc,yBAAKa,IAAKb,EAAYc,IAAI,KAGxCd,GACA,kBAACQ,EAAA,EAAD,CACEC,UAAWjB,IACXkB,KAAK,OACLC,SAAU,CAACrC,KACXsC,KAAK,UACLG,MAAO,CAACC,UAAU,UAGtB,4BAAQN,KAAK,SAASnB,UAAU,gCAAhC,aDZSI,aArBqB,SAAC,GAA4C,IAA3CG,EAA0C,EAA1CA,OAAOE,EAAmC,EAAnCA,WAAYN,EAAuB,EAAvBA,kBAKvD,OAAGI,EACM,kBAAC,IAAD,CAAUmB,GAAG,aAIpB,yBAAK1B,UAAU,SACb,qCACA,kBAACW,EAAD,CAAgBI,SAXH,SAACY,GAChBxB,EAAkBwB,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAU7CtB,WAAYA","file":"static/js/6.f6db2009.chunk.js","sourcesContent":["type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if(value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n","import React from 'react';\nimport './FormControls.css';\nlet classNames = require('classnames');\n\nexport const Textarea = ({input, meta: { touched, error }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'send-message': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <textarea className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n\nexport const Input = ({input, meta: { touched, error }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <input className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n","import {connect, ConnectedProps} from \"react-redux\";\n\nimport {AppReducerType} from \"../../redux-store\";\nimport {loginThunkCreator} from \"../../reducers/authReducer\";\n\nconst mapStateToProps = (state: AppReducerType) => ({\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaURL\n})\n\nconst mapDispatchToProps = {\n    loginThunkCreator\n}\n\nexport const loginConnector = connect(mapStateToProps, mapDispatchToProps);\nexport type PropsFromRedux = ConnectedProps<typeof loginConnector>;\nexport type LoginThunkCreatorHandler = PropsFromRedux[\"loginThunkCreator\"];\n","import React from \"react\";\nimport \"./Login.css\";\nimport { LoginForm } from \"./LoginFormComponent/LoginForm\";\nimport { reduxForm } from \"redux-form\";\nimport { Redirect } from 'react-router-dom';\nimport {LoginThunkCreatorHandler, loginConnector} from \"./loginConnector\";\n\ntype LoginProps = {\n  isAuth: boolean | undefined;\n  captchaUrl: string | undefined;\n  loginThunkCreator: LoginThunkCreatorHandler;\n}\n\nexport type LoginFormData = {\n  login: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string\n}\n\nexport type LoginFormType = {\n  captchaUrl: string | undefined\n};\n\nconst Login: React.FC<LoginProps> = ({isAuth,captchaUrl, loginThunkCreator}) => {\n  const onSubmit = (formData: LoginFormData) => {\n    loginThunkCreator(formData.login, formData.password, formData.rememberMe, formData.captcha);\n  }\n\n  if(isAuth){\n    return <Redirect to='/profile'/>\n  }\n\n  return (\n    <div className=\"login\">\n      <h2>Login</h2>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n  );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormData, LoginFormType>({\n  form: \"login\"\n})(LoginForm);\n\nexport default loginConnector(Login);\n","import React from \"react\";\r\nimport \"./LoginForm.css\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport { Input } from \"../../../FormControls/FormControls\";\r\nimport { required } from \"../../../utils/validators/validators\";\r\nimport {LoginFormData, LoginFormType} from \"../Login\";\r\n\r\ntype LoginFormTypeProps = React.FC<LoginFormType & InjectedFormProps<LoginFormData, LoginFormType>>;\r\n\r\nexport let LoginForm: LoginFormTypeProps = ({handleSubmit, error, captchaUrl}) => {\r\n  return (\r\n    <form className=\"login-form\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputEmail4\">Login</label>\r\n        <Field\r\n          component={Input}\r\n          type=\"text\"\r\n          validate={[required]}\r\n          name=\"login\"\r\n          placeholder=\"Введите логин\"\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputPassword4\">Password</label>\r\n        <Field\r\n          component={Input}\r\n          type=\"password\"\r\n          validate={[required]}\r\n          name=\"password\"\r\n          placeholder=\"Введите пароль\"\r\n        />\r\n      </div>\r\n      <div className=\"form-check\">\r\n        <Field\r\n          component='input'\r\n          className=\"form-check-input\"\r\n          name=\"rememberMe\"\r\n          type=\"checkbox\"\r\n        />\r\n        <label className=\"form-check-label\" htmlFor=\"gridCheck\">\r\n          Remember me\r\n        </label>\r\n      </div>\r\n      <div className='someError'>{error}</div>\r\n      {\r\n        captchaUrl && <img src={captchaUrl} alt=''/>\r\n      }\r\n      {\r\n        captchaUrl &&\r\n        <Field\r\n          component={Input}\r\n          type=\"text\"\r\n          validate={[required]}\r\n          name=\"captcha\"\r\n          style={{marginTop:'15px'}}\r\n        />\r\n      }\r\n      <button type=\"submit\" className=\"btn btn-primary button-login\">\r\n        Login\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n"],"sourceRoot":""}