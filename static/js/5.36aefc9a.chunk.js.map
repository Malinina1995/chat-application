{"version":3,"sources":["utils/validators/validators.js","FormControls/FormControls.js","hoc/AuthRedirect.js","Components/DialogsComponent/DialogItemComponent/DialogItem.js","Components/DialogsComponent/MessageComponent/Message.js","Components/DialogsComponent/Dialogs.js","Components/DialogsComponent/DialogsContainer.js"],"names":["required","value","maxLength","max","length","undefined","classNames","require","Textarea","input","meta","touched","error","placeholder","warning","props","hasError","classesForTextarea","className","Input","authRedirect","Component","RedirectComponent","this","isAuth","to","React","connect","state","auth","authRedirectAwaiter","AuthRedirectAwaiter","authThunkCreator","DialogItem","src","path","name","Message","message","maxLength100","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","type","aria-label","validate","compose","dialogsPage","addMessage","addMessageActionCreator","dialogs","map","dialog","key","id","messages","formData","newMessageText"],"mappings":"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","file":"static/js/5.36aefc9a.chunk.js","sourcesContent":["export const required = value => {\r\n  if(value) return undefined;\r\n  return 'Field is reqiared';\r\n}\r\n\r\nexport const maxLength = max => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n","import React from 'react';\nimport './FormControls.css';\nvar classNames = require('classnames');\n\nexport const Textarea = ({input, meta: { touched, error, warning }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'send-message': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <textarea className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n\nexport const Input = ({input, meta: { touched, error, warning }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <input className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}","import { Redirect } from 'react-router-dom';\r\nimport React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { authThunkCreator } from '../reducers/authReducer';\r\nimport { Preloader } from '../Components/PreloaderComponent/Preloader';\r\n\r\n\r\nexport const authRedirect = (Component) => {\r\n  \r\n  let mapStateToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  })\r\n  class RedirectComponent extends React.Component {\r\n    \r\n    render() {\r\n      if(!this.props.isAuth){\r\n        return <Redirect to=\"/login\"/>\r\n      } \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let connectAuthRedirect = connect(mapStateToRedirect)(RedirectComponent);\r\n\r\n  return connectAuthRedirect;\r\n}\r\n\r\nexport const authRedirectAwaiter = (Component) => {\r\n  \r\n  let mapStateToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  })\r\n  class AuthRedirectAwaiter extends React.Component {\r\n    componentDidMount() {\r\n      this.props.authThunkCreator();\r\n    }\r\n    \r\n    render() {\r\n      if(this.props.isAuth === null){\r\n        return <Preloader />\r\n      } \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n\r\n  let connectAuthRedirect = connect(mapStateToRedirect, {authThunkCreator})(AuthRedirectAwaiter);\r\n\r\n  return connectAuthRedirect;\r\n}","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./DialogItem.css\";\r\n\r\nexport function DialogItem(props) {\r\n  return (\r\n    <div className=\"message_dialogs-item\">\r\n      <img className=\"message_dialogs-item-avatar\" src=\"https://pm1.narvii.com/6889/74979d4d2744ec6e27995b6e866f091d04c0b40cr1-515-414v2_uhq.jpg\" />\r\n      <NavLink to={`/dialogs/${props.path}`}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport \"./Message.css\";\r\n\r\nexport function Message(props) {\r\n  return (\r\n    <div className=\"message_messages-item\">\r\n      <img src=\"https://cdn.pixabay.com/photo/2013/07/13/10/09/ghost-156656_960_720.png\" className='message_messages-item-avatar'/>\r\n      {props.message}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport { NavLink, Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nimport \"./Dialogs.css\";\r\n\r\nimport { DialogItem } from './DialogItemComponent/DialogItem';\r\nimport { Message } from './MessageComponent/Message';\r\nimport { Textarea } from '../../FormControls/FormControls';\r\nimport { required, maxLength } from '../../utils/validators/validators';\r\n\r\nexport function Dialogs(props) {\r\n\r\n  if (!props.isAuth) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  let addNewMessage = formData => {\r\n    props.addMessage(formData.newMessageText);\r\n  }\r\n\r\n  return (\r\n    <div className=\"message-content\">\r\n      <div className=\"message_dialogs\">\r\n        {props.dialogsPage.dialogs.map(dialog => {\r\n          return (\r\n            <DialogItem name={dialog.name} key={dialog.id} path={dialog.id} />\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"message_messages\">\r\n        <div className=\"message_messages-items\">\r\n          {props.dialogsPage.messages.map(message => {\r\n            return <Message key={message.id} message={message.message} />;\r\n          })}\r\n        </div>\r\n        <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet maxLength100 = maxLength(100);\r\n\r\nconst DialogsForm = props => {\r\n  return (\r\n    <form className=\"message_messages-textarea-send\" onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name='newMessageText'\r\n        type=\"text\"\r\n        placeholder=\"Write a message...\"\r\n        aria-label=\"Search\"\r\n        validate={[required, maxLength100]}\r\n      />\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n  form: \"addMessage\"\r\n})(DialogsForm);\r\n","import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport { Dialogs } from \"./Dialogs\";\nimport { authRedirect, authRedirectAwaiter } from \"../../hoc/AuthRedirect\";\n\nimport {\n  addMessageActionCreator\n} from \"../../reducers/dialogsReducer\";\n\nlet mapStateToProps = state => {\n  return {\n    dialogsPage: state.dialogsPage\n  };\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    {\n      addMessage: addMessageActionCreator\n    }\n  ),\n  authRedirectAwaiter,\n  authRedirect\n)(Dialogs);\n"],"sourceRoot":""}