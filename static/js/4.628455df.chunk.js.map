{"version":3,"sources":["utils/validators/validators.ts","FormControls/FormControls.js","hoc/AuthRedirect.js","Components/ProfileComponent/PostComponent/Post.tsx","Components/ProfileComponent/MyPostsComponent/MyPosts.tsx","Components/ProfileComponent/MyPostsComponent/MyPostsConnector.ts","Components/ProfileComponent/MyPostsComponent/MyPostsContainer.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Components/ProfileComponent/ProfileStatus/ProfileStatusWithHooks.tsx","Components/ProfileComponent/ProfileInfoComponent/ProfileDataComponent/ProfileData.tsx","Components/ProfileComponent/ProfileInfoComponent/ProfileDataForm/ProfileDataForm.tsx","Components/ProfileComponent/ProfileInfoComponent/ProfileInfo.tsx","Components/ProfileComponent/Profile.tsx","Components/ProfileComponent/profileConnector.ts","Components/ProfileComponent/ProfileContainer.tsx"],"names":["required","value","maxLength","max","length","undefined","classNames","require","Textarea","input","meta","touched","error","placeholder","props","hasError","classesForTextarea","className","Input","authRedirect","Component","RedirectComponent","this","isAuth","to","React","connect","state","auth","authRedirectAwaiter","AuthRedirectAwaiter","authThunkCreator","Post","message","src","alt","maxLength30","AddPostsReduxForm","reduxForm","form","onSubmitSuccess","result","dispatch","reset","handleSubmit","onSubmit","Field","component","name","rows","validate","mapDispatchToProps","addPost","addPostActionCreator","MyPostsContainer","posts","profilePage","myPostsConnector","text","newPostText","reverse","map","post","key","id","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onDoubleClick","isOwner","ProfileData","profile","goToEditMode","contacts","aboutMe","lookingForAJob","lookingForAJobDescription","keys","contactsTitle","contactsValue","onClick","Contacts","type","ProfileDataFormReduxForm","initialValues","style","flexBasis","ProfileInfo","updateUserStatusThunkCreator","saveDataThunkCreator","savePhotoThunkCreator","Preloader","imagePath","photos","large","fullName","formData","then","target","files","Profile","getUserThunkCreator","getUserStatusThunkCreator","profileConnector","logUserId","userId","ProfileContainer","refreshProfile","prevProps","prevState","match","params","compose","withRouter"],"mappings":"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","file":"static/js/4.628455df.chunk.js","sourcesContent":["type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if(value) return undefined;\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLength = (max: number): FieldValidatorType => value =>\r\n  value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n","import React from 'react';\nimport './FormControls.css';\nlet classNames = require('classnames');\n\nexport const Textarea = ({input, meta: { touched, error }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'send-message': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <textarea className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n\nexport const Input = ({input, meta: { touched, error }, placeholder, ...props}) => {\n  const hasError =  touched && error;\n  const classesForTextarea = classNames({\n    'form-control': true,\n    'errorTextarea': hasError,\n    'borderColor': !hasError\n  });\n\n  return (\n    <input className={classesForTextarea} placeholder={placeholder} {...input} {...props}/>\n  )\n}\n","import { Redirect } from 'react-router-dom';\r\nimport React  from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { authThunkCreator } from '../reducers/authReducer';\r\nimport { Preloader } from '../Components/PreloaderComponent/Preloader';\r\n\r\n\r\nexport const authRedirect = (Component) => {\r\n  \r\n  let mapStateToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n  class RedirectComponent extends React.Component {\r\n    \r\n    render() {\r\n      if(!this.props.isAuth){\r\n        return <Redirect to=\"/login\"/>\r\n      } \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let connectAuthRedirect = connect(mapStateToRedirect)(RedirectComponent);\r\n\r\n  return connectAuthRedirect;\r\n};\r\n\r\nexport const authRedirectAwaiter = (Component) => {\r\n  \r\n  let mapStateToRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n  class AuthRedirectAwaiter extends React.Component {\r\n    componentDidMount() {\r\n      this.props.authThunkCreator();\r\n    }\r\n    \r\n    render() {\r\n      if(this.props.isAuth === undefined){\r\n        return <Preloader />\r\n      } \r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n\r\n  let connectAuthRedirect = connect(mapStateToRedirect, {authThunkCreator})(AuthRedirectAwaiter);\r\n\r\n  return connectAuthRedirect;\r\n};\r\n","import React  from \"react\";\r\nimport \"./Post.css\";\r\n\r\ntype PostTypeProps = {\r\n    message: string\r\n}\r\n\r\nexport const Post: React.FC<PostTypeProps> = ({message}) => {\r\n  return (\r\n    <div className=\"post\">\r\n      <img src=\"https://avatars.yandex.net/get-music-user-playlist/27701/265236767.1000.16809/m1000x1000?1498108273588&webp=false\" alt=''/>\r\n      <span>{message}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../../FormControls/FormControls\";\nimport \"./MyPosts.css\";\nimport {Post} from \"../PostComponent/Post\";\nimport {Dispatch} from \"redux\";\nimport {AddPostHandler} from \"./MyPostsConnector\";\nimport {PostType} from \"../../../types\";\n\nconst afterSubmit = (result: any, dispatch: Dispatch<any>) =>\n    dispatch(reset('addPost'));\n\ntype MyPostsProps = {\n    posts: PostType[]\n    addPost: AddPostHandler\n}\n\ntype MyPostType = {\n    newPostText: string\n}\n\nexport const MyPosts: React.FC<MyPostsProps> = (props) => {\n    let addNewPost = (text: MyPostType) => {\n        props.addPost(text.newPostText);\n    };\n\n    return (\n        <div className=\"profile_posts\">\n            <AddPostsReduxForm onSubmit={addNewPost}/>\n            <div className=\"profile_posts-items\">\n                {[...props.posts].reverse().map(post => {\n                    return <Post key={post.id} message={post.message}/>;\n                })}\n            </div>\n        </div>\n    );\n}\n\nlet maxLength30 = maxLength(30);\n\ntype MyPostFormProps = {};\ntype MyPostFormType = React.FC<MyPostFormProps & InjectedFormProps<MyPostType, MyPostFormProps>>;\nconst PostsForm: MyPostFormType = ({handleSubmit}) => {\n    return (\n        <form className=\"form-group textarea\" onSubmit={handleSubmit}>\n            <Field\n                component={Textarea}\n                name=\"newPostText\"\n                placeholder=\"What's new?\"\n                rows=\"3\"\n                value=''\n                validate={[required, maxLength30]}\n            />\n            <div>\n                <button className=\"btn btn-primary textarea-send\">Add</button>\n            </div>\n        </form>\n    );\n}\n\nconst AddPostsReduxForm = reduxForm<MyPostType, MyPostFormProps>({\n    form: \"addPost\",\n    onSubmitSuccess: afterSubmit\n})(PostsForm);\n","import {connect, ConnectedProps} from \"react-redux\";\nimport {AppReducerType} from \"../../../redux-store\";\nimport {addPostActionCreator} from \"../../../reducers/profileReducer\";\n\nconst mapStateToProps = (state:AppReducerType) => {\n    return {\n        posts: state.profilePage.posts\n    };\n};\n\nconst mapDispatchToProps = {\n    addPost: addPostActionCreator\n}\n\nexport const myPostsConnector = connect(mapStateToProps, mapDispatchToProps);\nexport type MyPostsPropsFromRedux = ConnectedProps<typeof myPostsConnector>;\nexport type AddPostHandler = MyPostsPropsFromRedux[\"addPost\"];\n","import {MyPosts} from \"./MyPosts\";\nimport {myPostsConnector} from \"./MyPostsConnector\";\n\nexport const MyPostsContainer = myPostsConnector(MyPosts);\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {useState, useEffect, ChangeEvent} from \"react\";\nimport \"./ProfileStatus.css\"\nimport {UpdateUserStatusHandler} from \"../profileConnector\";\n\ntype ProfileStatusWithHooksPropsType = {\n  status: string;\n  isOwner: boolean;\n  updateStatus: UpdateUserStatusHandler\n}\n\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusWithHooksPropsType> = props => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n\n  const activateEditMode = () => {\n    props.isOwner ? setEditMode(true) : setEditMode(false);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateStatus(status);\n  };\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  return (\n    <div className='profile-status'>\n      {!editMode ? (\n        <div onDoubleClick={activateEditMode}>\n          {props.status || \"No status\"}\n        </div>\n      ) : (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\r\nimport \"./ProfileData.css\";\r\nimport {ContactsType, ProfileType} from \"../../../../types\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    const {profile, isOwner, goToEditMode} = props;\r\n    const contacts = profile.contacts ?? ({} as ContactsType);\r\n    return (\r\n        <>\r\n            <div>\r\n                <span className=\"profile_info-title\">About me: </span>\r\n                <span>{profile.aboutMe}</span>\r\n            </div>\r\n            <div>\r\n                <span className=\"profile_info-title\">Looking for a job: </span>\r\n                <span>{profile.lookingForAJob ? \"yes\" : \"no\"}</span>\r\n            </div>\r\n            {profile.lookingForAJob && (\r\n                <div>\r\n                    <span className=\"profile_info-title\">My professional skills: </span>\r\n                    <span>{profile.lookingForAJobDescription}</span>\r\n                </div>\r\n            )}\r\n            <div className=\"profile_info-title\">Contacts:</div>\r\n            {Object.keys(contacts).map(key => {\r\n                return (\r\n                    <Contacts\r\n                        key={key}\r\n                        contactsTitle={key}\r\n                        contactsValue={contacts[key]}\r\n                    />\r\n                );\r\n            })}\r\n            {isOwner && <div>\r\n                <button className=\"btn btn-primary\" onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n        </>\r\n    );\r\n};\r\n\r\ntype ContactsPropsType = {\r\n    contactsTitle: string;\r\n    contactsValue: string | undefined;\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({contactsTitle, contactsValue}) => {\r\n    return (\r\n        <div>\r\n            <span className=\"profile_info-title contacts\">{contactsTitle}: </span>\r\n            <span>{contactsValue}</span>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../../FormControls/FormControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\nimport './ProfileDataForm.css';\r\nimport {ContactsType, ProfileType} from \"../../../../types\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    initialValues: ProfileType;\r\n}\r\n\r\n//initialsValue cannot be renamed\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType,\r\n    ProfileDataFormPropsType> & ProfileDataFormPropsType> = ({handleSubmit, initialValues, error}) => {\r\n    const contacts = initialValues.contacts ?? ({} as ContactsType);\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <span className=\"profile_info-title\">Full name: </span>\r\n                <Field\r\n                    component={Input}\r\n                    type=\"text\"\r\n                    name=\"fullName\"\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <span className=\"profile_info-title\">About me: </span>\r\n                <Field\r\n                    component={Input}\r\n                    type=\"text\"\r\n                    name=\"aboutMe\"\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div className='profile_info-checkbox'>\r\n                <span className=\"profile_info-title profile_info-checkbox-title\">Looking for a job: </span>\r\n                <Field\r\n                    component={Input}\r\n                    style={{flexBasis:'10%'}}\r\n                    type=\"checkbox\"\r\n                    name=\"lookingForAJob\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <span className=\"profile_info-title\">My professional skills: </span>\r\n                <Field\r\n                    component={Textarea}\r\n                    type=\"text\"\r\n                    name=\"lookingForAJobDescription\"\r\n                    validate={[required]}\r\n                />\r\n            </div>\r\n            <div className=\"profile_info-title\">Contacts:</div>\r\n            {Object.keys(contacts).map(key => {\r\n                return (\r\n                    <Contacts\r\n                        key={key}\r\n                        contactsTitle={key}\r\n                        contactsValue={contacts[key]}\r\n                    />\r\n                );\r\n            })}\r\n            <div className='someError'>{error}</div>\r\n            <div>\r\n                <button className=\"btn btn-primary\">save</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\ntype ContactsPropsType = {\r\n    contactsTitle: string;\r\n    contactsValue: string | null | undefined;\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = ({contactsTitle, contactsValue}) => {\r\n    return (\r\n        <div>\r\n            <span className=\"profile_info-title contacts\">{contactsTitle}: </span>\r\n            <Field component={Input} type=\"text\" name={`contacts.${contactsValue}`}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({\r\n    form: \"edit-profile\"\r\n})(ProfileDataForm);\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Preloader} from \"../../PreloaderComponent/Preloader\";\r\n\r\nimport \"./ProfileInfo.css\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport {ProfileData} from \"./ProfileDataComponent/ProfileData\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ProfileProps} from \"../Profile\";\r\nimport {ProfileType} from \"../../../types\";\r\n\r\nexport const ProfileInfo: React.FC<ProfileProps> = (props) => {\r\n    const {\r\n        isOwner, profile, status,\r\n        updateUserStatusThunkCreator, saveDataThunkCreator, savePhotoThunkCreator\r\n    } = props;\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n\r\n    const onMainPhotoSelector = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value.length) {\r\n            const files = e.target?.files ?? [];\r\n            if (files.length) {\r\n                savePhotoThunkCreator(files[0]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveDataThunkCreator(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    };\r\n\r\n    const imagePath = profile.photos?.large\r\n        ? profile.photos.large\r\n        : \"https://avatars.mds.yandex.net/get-pdb/1732371/78b3b128-3813-4d35-8b87-b3c911581ca0/s1200?webp=false\";\r\n    debugger\r\n    return (\r\n        <>\r\n            <div className=\"profile_info\">\r\n                <div>\r\n                    <img src={imagePath} alt='' className=\"profile_info-avatar\"/>\r\n                </div>\r\n                <div className=\"profile_information\">\r\n                    <span className=\"profile_info-name\">{profile.fullName}</span>\r\n                    <ProfileStatusWithHooks\r\n                        status={status}\r\n                        isOwner={isOwner}\r\n                        updateStatus={updateUserStatusThunkCreator}\r\n                    />\r\n                    {editMode ? (\r\n                        <ProfileDataFormReduxForm\r\n                            initialValues={profile}\r\n                            onSubmit={onSubmit}\r\n                        />\r\n                    ) : (\r\n                        <ProfileData\r\n                            goToEditMode={() => {\r\n                                setEditMode(true);\r\n                            }}\r\n                            profile={profile}\r\n                            isOwner={isOwner}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n            {isOwner && (\r\n                <div className=\"profile_info-addPhoto\">\r\n                    Update avatar <input type=\"file\" onChange={onMainPhotoSelector}/>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./Profile.css\";\r\nimport {MyPostsContainer} from \"./MyPostsComponent/MyPostsContainer\";\r\nimport {ProfileInfo} from \"./ProfileInfoComponent/ProfileInfo\";\r\nimport {ProfileType} from \"../../types\";\r\nimport {SaveDataHandler, SavePhotoHandler, UpdateUserStatusHandler} from \"./profileConnector\";\r\n\r\nexport type ProfileProps = {\r\n    profile: ProfileType | undefined;\r\n    status: string;\r\n    isOwner: boolean;\r\n    updateUserStatusThunkCreator: UpdateUserStatusHandler;\r\n    savePhotoThunkCreator: SavePhotoHandler;\r\n    saveDataThunkCreator: SaveDataHandler;\r\n}\r\n\r\nexport const Profile: React.FC<ProfileProps> = (props) => {\r\n    return (\r\n        <div className=\"profile-content\">\r\n            <ProfileInfo {...props}/>\r\n            <div className=\"profile_posts\">\r\n                <MyPostsContainer/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import {connect, ConnectedProps} from \"react-redux\";\nimport {AppReducerType} from \"../../redux-store\";\nimport {\n    getUserThunkCreator, getUserStatusThunkCreator, saveDataThunkCreator,\n    savePhotoThunkCreator,\n    updateUserStatusThunkCreator\n} from \"../../reducers/profileReducer\";\n\nconst mapStateToProps = (state: AppReducerType) => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        logUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    };\n};\n\nconst mapDispatchToProps = {\n    getUserThunkCreator,\n    getUserStatusThunkCreator,\n    updateUserStatusThunkCreator,\n    savePhotoThunkCreator,\n    saveDataThunkCreator\n}\n\nexport const profileConnector = connect(mapStateToProps, mapDispatchToProps);\nexport type ProfilePropsFromRedux = ConnectedProps<typeof profileConnector>;\nexport type GetUserHandler = ProfilePropsFromRedux[\"getUserThunkCreator\"];\nexport type GetUserStatusHandler = ProfilePropsFromRedux[\"getUserStatusThunkCreator\"];\nexport type UpdateUserStatusHandler = ProfilePropsFromRedux[\"updateUserStatusThunkCreator\"];\nexport type SavePhotoHandler = ProfilePropsFromRedux[\"savePhotoThunkCreator\"];\nexport type SaveDataHandler = ProfilePropsFromRedux[\"saveDataThunkCreator\"];\n","import React, {Component, ComponentType} from \"react\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nimport {Profile} from \"./Profile\";\nimport {Preloader} from \"../PreloaderComponent/Preloader\";\nimport {authRedirect, authRedirectAwaiter} from \"../../hoc/AuthRedirect\";\nimport {\n    GetUserHandler,\n    GetUserStatusHandler,\n    profileConnector,\n    SaveDataHandler,\n    SavePhotoHandler,\n    UpdateUserStatusHandler\n} from \"./profileConnector\";\nimport {ProfileType} from \"../../types\";\n\ntype ProfileContainerProps = {\n    profile: ProfileType | undefined;\n    status: string;\n    logUserId: number;\n    isAuth: boolean | undefined;\n    getUserThunkCreator: GetUserHandler;\n    getUserStatusThunkCreator: GetUserStatusHandler;\n    updateUserStatusThunkCreator: UpdateUserStatusHandler;\n    savePhotoThunkCreator: SavePhotoHandler;\n    saveDataThunkCreator: SaveDataHandler;\n} & RouteComponentProps<MatchParams>;\n\ninterface MatchParams {\n    userId: string;\n}\n\nclass ProfileContainer extends Component<ProfileContainerProps> {\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: ProfileContainerProps, prevState: ProfileContainerProps) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n            ? +this.props.match.params.userId\n            : this.props.logUserId;\n        this.props.getUserThunkCreator(userId);\n        this.props.getUserStatusThunkCreator(userId);\n    }\n\n    render() {\n        const isOwner = !this.props.match.params.userId;\n        debugger\n        return <>\n            {!this.props.profile ? (\n                <Preloader/>\n            ) : (\n                <Profile\n                    {...this.props}\n                    isOwner={isOwner}\n                />\n            )}\n        </>\n    }\n}\n\n\nexport default compose<ComponentType<ProfileContainer>>(\n    profileConnector,\n    withRouter,\n    authRedirectAwaiter,\n    authRedirect\n)(ProfileContainer);\n"],"sourceRoot":""}